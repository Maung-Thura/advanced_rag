{"id":"e71306b6-e8df-4bdf-a871-03ec5049b4a8","data":{"nodes":[{"id":"TextInput-R97Ag","type":"genericNode","position":{"x":-107.54909067975677,"y":-30.144195101807846},"data":{"type":"TextInput","node":{"template":{"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"Maung","fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Value","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Text or Record to be passed as input.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Interaction Panel.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get text inputs from the Interaction Panel.","icon":"type","base_classes":["object","str","Text"],"display_name":"Name","documentation":"","custom_fields":{"input_value":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"TextInput-R97Ag"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":-107.54909067975677,"y":-30.144195101807846},"dragging":false},{"id":"Prompt-YJndQ","type":"genericNode","position":{"x":1595.6922523439016,"y":-88.0619223359048},"data":{"type":"Prompt","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_core.prompts import PromptTemplate\n\nfrom langflow.field_typing import Prompt, TemplateField, Text\nfrom langflow.interface.custom.custom_component import CustomComponent\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from langflow.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"type":"prompt","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"Hey, answer the users question based on the following context:\n\nThe context is this: {context}\n\nAnd this is the message history: {history}\n\nThe users question is this: {question}","fileTypes":[],"file_path":"","password":false,"name":"template","display_name":"Template","advanced":false,"input_types":["Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false},"_type":"CustomComponent","context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Document","BaseOutputParser","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"history":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"history","display_name":"history","advanced":false,"input_types":["Document","BaseOutputParser","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"question","display_name":"question","advanced":false,"input_types":["Document","BaseOutputParser","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["object","str","Text"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","history","question"]},"output_types":["Text"],"full_path":null,"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"error":null},"id":"Prompt-YJndQ","description":"Create a prompt template with dynamic variables.","display_name":"Prompt"},"selected":false,"width":384,"height":571,"positionAbsolute":{"x":1595.6922523439016,"y":-88.0619223359048},"dragging":false},{"id":"ChatInput-Wzq9A","type":"genericNode","position":{"x":446.8597426417457,"y":-35.0730087154655},"data":{"type":"ChatInput","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Interaction Panel.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Message\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n    ) -> Union[Text, Record]:\n        return super().build_no_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Message","advanced":false,"input_types":[],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"value":"Briefly describe the results and discussion in Tree delineation with reduced dimensions using entropy and deep learning?"},"return_record":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"return_record","display_name":"Return Record","advanced":true,"dynamic":false,"info":"Return the message as a record containing the sender, sender_name, and session_id.","load_from_db":false,"title_case":false},"sender":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"User","fileTypes":[],"file_path":"","password":false,"options":["Machine","User"],"name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"sender_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"sender_name","display_name":"Sender Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"session_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"session_id","display_name":"Session ID","advanced":true,"dynamic":false,"info":"If provided, the message will be stored in the memory.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get chat inputs from the Interaction Panel.","icon":"ChatInput","base_classes":["object","Record","str","Text"],"display_name":"Chat Input","documentation":"","custom_fields":{"sender":null,"sender_name":null,"input_value":null,"session_id":null,"return_record":null},"output_types":["Text","Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"ChatInput-Wzq9A"},"selected":false,"width":384,"height":375,"positionAbsolute":{"x":446.8597426417457,"y":-35.0730087154655},"dragging":false},{"id":"MemoryComponent-7bzTr","type":"genericNode","position":{"x":443.5343334597336,"y":389.1355324771615},"data":{"type":"MemoryComponent","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.memory.memory import BaseMemoryComponent\nfrom langflow.field_typing import Text\nfrom langflow.helpers.record import records_to_text\nfrom langflow.memory import get_messages\nfrom langflow.schema.schema import Record\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Record]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = records_to_text(template=record_template or \"\", records=messages)\n        self.status = messages_str\n        return messages_str\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"n_messages":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":5,"fileTypes":[],"file_path":"","password":false,"name":"n_messages","display_name":"Number of Messages","advanced":false,"dynamic":false,"info":"Number of messages to retrieve.","load_from_db":false,"title_case":false},"order":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"Descending","fileTypes":[],"file_path":"","password":false,"options":["Ascending","Descending"],"name":"order","display_name":"Order","advanced":true,"dynamic":false,"info":"Order of the messages.","load_from_db":false,"title_case":false,"input_types":["Text"]},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"{sender_name}: {text}","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"sender":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"Machine and User","fileTypes":[],"file_path":"","password":false,"options":["Machine","User","Machine and User"],"name":"sender","display_name":"Sender Type","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"sender_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"sender_name","display_name":"Sender Name","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"session_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"session_id","display_name":"Session ID","advanced":false,"input_types":["Text"],"dynamic":false,"info":"Session ID of the chat history.","load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"Retrieves stored chat messages given a specific Session ID.","icon":"history","base_classes":["object","str","Text"],"display_name":"Chat Memory","documentation":"","custom_fields":{"sender":null,"sender_name":null,"session_id":null,"n_messages":null,"order":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":true},"id":"MemoryComponent-7bzTr"},"selected":false,"width":384,"height":489,"positionAbsolute":{"x":443.5343334597336,"y":389.1355324771615},"dragging":false},{"id":"OpenAIModel-l8vdA","type":"genericNode","position":{"x":2128.4982861068042,"y":-89.79928807059963},"data":{"type":"OpenAIModel","node":{"template":{"input_value":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Input","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": [\n                    \"gpt-4-turbo-2024-04-09\",\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-3.5-turbo\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n                \"value\": \"gpt-4-turbo-preview\",\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":256,"fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"model_kwargs":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"model_name":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"gpt-4-turbo-2024-04-09","fileTypes":[],"file_path":"","password":false,"options":["gpt-4-turbo-2024-04-09","gpt-4-turbo-preview","gpt-3.5-turbo","gpt-4-0125-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106"],"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.","load_from_db":false,"title_case":false,"input_types":["Text"]},"openai_api_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","load_from_db":true,"title_case":false,"input_types":["Text"],"value":"mt_openai_api_key"},"stream":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","load_from_db":false,"title_case":false},"system_message":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","load_from_db":false,"title_case":false,"input_types":["Text"]},"temperature":{"type":"float","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":0.1,"fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"step_type":"float","min":-1,"max":1,"step":0.1},"load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"Generates text using OpenAI LLMs.","icon":"OpenAI","base_classes":["object","str","Text"],"display_name":"OpenAI","documentation":"","custom_fields":{"input_value":null,"openai_api_key":null,"temperature":null,"model_name":null,"max_tokens":null,"model_kwargs":null,"openai_api_base":null,"stream":null,"system_message":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":["max_tokens","model_kwargs","model_name","openai_api_base","openai_api_key","temperature","input_value","system_message","stream"],"beta":false},"id":"OpenAIModel-l8vdA"},"selected":false,"width":384,"height":563,"positionAbsolute":{"x":2128.4982861068042,"y":-89.79928807059963},"dragging":false},{"id":"ChatOutput-awYSO","type":"genericNode","position":{"x":2604.268295968416,"y":-93.3697437163321},"data":{"type":"ChatOutput","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Interaction Panel.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Message","advanced":false,"input_types":["Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"{text}","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"In case of Message being a Record, this template will be used to convert it to text.","load_from_db":false,"title_case":false,"input_types":["Text"]},"return_record":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"return_record","display_name":"Return Record","advanced":true,"dynamic":false,"info":"Return the message as a record containing the sender, sender_name, and session_id.","load_from_db":false,"title_case":false},"sender":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"Machine","fileTypes":[],"file_path":"","password":false,"options":["Machine","User"],"name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"sender_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"AI","fileTypes":[],"file_path":"","password":false,"name":"sender_name","display_name":"Sender Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"session_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"session_id","display_name":"Session ID","advanced":true,"dynamic":false,"info":"If provided, the message will be stored in the memory.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Display a chat message in the Interaction Panel.","icon":"ChatOutput","base_classes":["object","Record","str","Text"],"display_name":"Chat Output","documentation":"","custom_fields":{"sender":null,"sender_name":null,"input_value":null,"session_id":null,"return_record":null,"record_template":null},"output_types":["Text","Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"ChatOutput-awYSO"},"selected":false,"width":384,"height":383,"positionAbsolute":{"x":2604.268295968416,"y":-93.3697437163321},"dragging":false},{"id":"SplitText-tDnBJ","type":"genericNode","position":{"x":-115.17056177064421,"y":943.6012899208648},"data":{"type":"SplitText","node":{"template":{"inputs":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"inputs","display_name":"Inputs","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Texts to split.","load_from_db":false,"title_case":false},"chunk_overlap":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":200,"fileTypes":[],"file_path":"","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of character overlap between chunks.","load_from_db":false,"title_case":false},"chunk_size":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":1000,"fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Max Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length (in number of characters) of each chunk.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langchain.text_splitter import CharacterTextSplitter, RecursiveCharacterTextSplitter\nfrom langchain_core.documents import Document\n\nfrom langflow.field_typing import Text\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema import Record\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(CustomComponent):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks of a specified length.\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Inputs\",\n                \"info\": \"Texts to split.\",\n                \"input_types\": [\"Record\", \"Text\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on. Defaults to [\" \"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Max Chunk Size\",\n                \"info\": \"The maximum length (in number of characters) of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of character overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"recursive\": {\n                \"display_name\": \"Recursive\",\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Text],\n        separators: Optional[list[str]] = [\" \"],\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n        recursive: bool = False,\n    ) -> list[Record]:\n        if separators is None:\n            separators = []\n        separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter: Optional[Union[CharacterTextSplitter, RecursiveCharacterTextSplitter]] = None\n        if recursive:\n            splitter = RecursiveCharacterTextSplitter(\n                separators=separators,\n                chunk_size=chunk_size,\n                chunk_overlap=chunk_overlap,\n            )\n\n        else:\n            splitter = CharacterTextSplitter(\n                separator=separators[0],\n                chunk_size=chunk_size,\n                chunk_overlap=chunk_overlap,\n            )\n\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(Document(page_content=_input))\n\n        records = self.to_records(splitter.split_documents(documents))\n        self.status = records\n        return records\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"recursive":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"recursive","display_name":"Recursive","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"separators":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":[" "],"fileTypes":[],"file_path":"","password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on. Defaults to [\" \"].","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Split text into chunks of a specified length.","base_classes":["Record"],"display_name":"Split Text","documentation":"","custom_fields":{"inputs":null,"separators":null,"chunk_size":null,"chunk_overlap":null,"recursive":null},"output_types":["Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"SplitText-tDnBJ"},"selected":false,"width":384,"height":615,"positionAbsolute":{"x":-115.17056177064421,"y":943.6012899208648},"dragging":false},{"id":"Directory-yIno3","type":"genericNode","position":{"x":-916.743787647224,"y":722.9776316270352},"data":{"type":"Directory","node":{"template":{"aws_access_key_id":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"aws_access_key_id","display_name":"AWS Access Key ID","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"ASIA52HHHYLHGKTBOVWG"},"aws_secret_access_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"aws_secret_access_key","display_name":"AWS Secret Access Key","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"R8JgTEVlw2qTcoUd9pZcu8V2WGVgSgH36NvLH2qp"},"aws_session_token":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"aws_session_token","display_name":"AWS Session Token","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"IQoJb3JpZ2luX2VjEH0aCXVzLWVhc3QtMiJGMEQCID8CM3+U6aqh6wGyLkcD/HszE+glPFQdjHzH5y8g+HN5AiB3Ijf0w6DmAnaoi92Dr9MZO0rTzBckLn89vtpB25i4Zir0Agjm//////////8BEAAaDDk0OTY3MjcyMzE1MCIMiU/LGIFx/b0ippGLKsgCiCaG4vH9tVobYRPS46Qf+QIPHLiyHhDGr3IFl0s0vMlqpyYhV+Sk4N72ek3P01hPqFUUUDIDakZO4JNg6w92/HiLRbtHGqP8UQ5mVP9r2a4s8G1eIFee3QIZtyzjwHmxqum3T4Su7JemW7J6LwIAbd/mozThBgemscuv2ZA3BkXBcmVhkur0+1eljwqWe/xiEHWV7oztK2emcmwHifhaixvZAkBiNF104XkxWK45Oky8W0OiZ44BdXC8oQvQqO1M3ELeV+FcrRJnXErRsmaI5pCJ4VURSVJkvpvkQI+WquG+tKXat6Zpv5Tv1+0QhpVjNS9SwJD7ttvjVa7M/++jPfnHE2hbSst0LjpqE0VXBVfMzZJx5VrCWe6ENkVffNM5P8fOZodn4jZGPPnu0gDYTWY9v5Z9xudxOT9BcAm0jI/TXD4Cfb42PTDl56CyBjqoAX3J4D7NVyAWBxcpMvUXD65k/llG/PX1zcRKmUFey4wiSbWPTbcI+3nQqiQ1OYemzYi3WRArtEdGtcn4gWuDDOS+wkizwQ7EFYSXGtSn8v9/ZTeZOswitC7ZgmzunCSzM8J5U2TKJ5lEveirfFV0RTmayw2ieh+TOzT4AwgreRJQL0PAW28xOEhyK5lQIqdqGgAZwP6padn6vDvh/PiTEDinDmUptfoJyg=="},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Dict, List, Optional\n\nimport boto3\nfrom botocore.exceptions import ClientError\nfrom langflow.base.data.utils import parallel_load_records, parse_text_file_to_record, retrieve_file_paths\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema import Record\n\nimport logging\nfrom pathlib import Path\nimport os, shutil\n\n\nclass S3DirectoryComponent(CustomComponent):\n    display_name = \"Directory\"\n    description = \"Recursively load files from a directory.\"\n    icon = \"folder\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"aws_access_key_id\": {\"display_name\": \"AWS Access Key ID\"},\n            \"aws_secret_access_key\": {\"display_name\": \"AWS Secret Access Key\"},\n            \"aws_session_token\": {\"display_name\": \"AWS Session Token\"},\n            \"s3_bucket_name\": {\"display_name\": \"s3 Bucket Name\"},\n            \"local_directory\": {\"display_name\": \"Local Directory\"},\n            \"total_files_limit\": {\"display_name\": \"Total Files Limit\"},\n            \"skip_file_download\": {\"display_name\": \"Skip File Download\"},\n            \"types\": {\n                \"display_name\": \"Types\",\n                \"info\": \"File types to load. Leave empty to load all types.\",\n            },\n            \"depth\": {\"display_name\": \"Depth\", \"info\": \"Depth to search for files.\"},\n            \"max_concurrency\": {\"display_name\": \"Max Concurrency\", \"advanced\": True},\n            \"load_hidden\": {\n                \"display_name\": \"Load Hidden\",\n                \"advanced\": True,\n                \"info\": \"If true, hidden files will be loaded.\",\n            },\n            \"recursive\": {\n                \"display_name\": \"Recursive\",\n                \"advanced\": True,\n                \"info\": \"If true, the search will be recursive.\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n            \"use_multithreading\": {\n                \"display_name\": \"Use Multithreading\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n            self,\n            aws_access_key_id: str,\n            aws_secret_access_key: str,\n            aws_session_token: str,\n            s3_bucket_name: str,\n            local_directory: str,\n            total_files_limit: int = 30,\n            skip_file_download: bool = False,\n            depth: int = 0,\n            max_concurrency: int = 2,\n            load_hidden: bool = False,\n            recursive: bool = True,\n            silent_errors: bool = False,\n            use_multithreading: bool = True,\n    ) -> List[Optional[Record]]:\n        resolved_path = self.resolve_path(local_directory)\n        if not skip_file_download:\n            success = self.download_files_from_s3(local_directory, total_files_limit, s3_bucket_name, aws_access_key_id,\n                                                  aws_secret_access_key,\n                                                  aws_session_token)\n            if not success:\n                raise Exception(\"Failed to download research papers from s3.\")\n\n        file_paths = retrieve_file_paths(resolved_path, load_hidden, recursive, depth)\n        loaded_records = []\n\n        if use_multithreading:\n            loaded_records = parallel_load_records(file_paths, silent_errors, max_concurrency)\n        else:\n            loaded_records = [parse_text_file_to_record(file_path, silent_errors) for file_path in file_paths]\n        loaded_records = list(filter(None, loaded_records))\n        self.status = loaded_records\n        return loaded_records\n\n    def download_files_from_s3(self, local_directory, total_files_limit, bucket, aws_access_key_id,\n                               aws_secret_access_key,\n                               aws_session_token):\n        s3_client = boto3.client('s3', aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key,\n                                 aws_session_token=aws_session_token)\n        try:\n            if not local_directory.endswith(\"/\"):\n                local_directory += \"/\"\n            file_list = s3_client.list_objects(Bucket=bucket)['Contents']\n            Path(local_directory).mkdir(parents=True, exist_ok=True)\n            file_count = 0\n\n            for filename in os.listdir(local_directory):\n                file_path = os.path.join(local_directory, filename)\n                try:\n                    if os.path.isfile(file_path) or os.path.islink(file_path):\n                        os.unlink(file_path)\n                    elif os.path.isdir(file_path):\n                        shutil.rmtree(file_path)\n                except Exception as e:\n                    print('Failed to delete %s. Reason: %s' % (file_path, e))\n\n            for key in file_list:\n                local_file = local_directory + key['Key']\n                if file_count < total_files_limit:\n                    # print(key['Key'] + 'file downloaded')\n                    s3_client.download_file(bucket, key['Key'], local_file)\n                    file_count += 1\n                else:\n                    logging.warning('Total files limit has been reached. ' + key['Key'] + ' will not be processed.')\n        except ClientError as e:\n            logging.error(e)\n            return False\n        return True\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"depth":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":0,"fileTypes":[],"file_path":"","password":false,"name":"depth","display_name":"Depth","advanced":false,"dynamic":false,"info":"Depth to search for files.","load_from_db":false,"title_case":false},"load_hidden":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"load_hidden","display_name":"Load Hidden","advanced":true,"dynamic":false,"info":"If true, hidden files will be loaded.","load_from_db":false,"title_case":false},"local_directory":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"local_directory","display_name":"Local Directory","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"/home/ubuntu/advancedrag/research_papers/"},"max_concurrency":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":2,"fileTypes":[],"file_path":"","password":false,"name":"max_concurrency","display_name":"Max Concurrency","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"recursive":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"recursive","display_name":"Recursive","advanced":true,"dynamic":false,"info":"If true, the search will be recursive.","load_from_db":false,"title_case":false},"s3_bucket_name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"s3_bucket_name","display_name":"s3 Bucket Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"pvj8334-msai490-s3"},"silent_errors":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","load_from_db":false,"title_case":false},"skip_file_download":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"skip_file_download","display_name":"Skip File Download","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"total_files_limit":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"30","fileTypes":[],"file_path":"","password":false,"name":"total_files_limit","display_name":"Total Files Limit","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"use_multithreading":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"use_multithreading","display_name":"Use Multithreading","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"Recursively load files from a directory.","icon":"folder","base_classes":["Record"],"display_name":"Directory","documentation":"","custom_fields":{"aws_access_key_id":null,"aws_secret_access_key":null,"aws_session_token":null,"s3_bucket_name":null,"local_directory":null,"total_files_limit":null,"skip_file_download":null,"depth":null,"max_concurrency":null,"load_hidden":null,"recursive":null,"silent_errors":null,"use_multithreading":null},"output_types":["Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"Directory-yIno3","description":"Recursively load files from a directory.","display_name":"Directory"},"selected":false,"width":384,"height":913,"positionAbsolute":{"x":-916.743787647224,"y":722.9776316270352},"dragging":false},{"id":"MongoDBAtlasVector-EobDp","type":"genericNode","position":{"x":648.0533561221011,"y":1075.2900719590752},"data":{"type":"MongoDBAtlasVector","node":{"template":{"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"inputs":{"type":"Record","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"inputs","display_name":"Input","advanced":false,"input_types":["Document","Record"],"dynamic":false,"info":"","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List, Optional\n\nfrom langflow.field_typing import Embeddings\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema.schema import Record\nfrom langchain_community.vectorstores.documentdb import (\n    DocumentDBSimilarityType,\n    DocumentDBVectorSearch,\n)\n# from sklearn.decomposition import PCA\n\n\nclass DocumentDBComponent(CustomComponent):\n    display_name = \"Document DB\"\n    description = \"Construct a Document DB Vector Search` vector store from raw documents.\"\n    icon = \"MongoDB\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"collection_name\": {\"display_name\": \"Collection Name\"},\n            \"db_name\": {\"display_name\": \"Database Name\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"documentdb_connection_url\": {\"display_name\": \"DocumentDB Connection URL\"},\n            \"dimensions\": {\"display_name\": \"Dimension\"},\n            \"similarity_algorithm\": {\n                    \"display_name\": \"Search Type\",\n                    \"options\": [\"COS\", \"EUC\", \"DOT\"],\n                },\n        }\n\n    def build(\n            self,\n            embedding: Embeddings,\n            inputs: Optional[List[Record]] = None,\n            collection_name: str = \"\",\n            db_name: str = \"\",\n            index_name: str = \"\",\n            documentdb_connection_url: str = \"\",\n            dimensions: int = 1536,\n            similarity_algorithm: str = \"COS\",\n    ) -> DocumentDBVectorSearch:\n\n        if similarity_algorithm == \"COS\":\n            sim_algorithm = DocumentDBSimilarityType.COS\n        elif similarity_algorithm == \"EUC\":\n            sim_algorithm = DocumentDBSimilarityType.EUC\n        elif similarity_algorithm == \"DOT\":\n            sim_algorithm = DocumentDBSimilarityType.DOT\n        else:\n            raise ImportError(\"Invalid Similarity Algorithm. Only COS and EUC are allowed.\")\n\n        # Assuming 'embeddings' is your 4096-dimensional embeddings matrix\n        # pca = PCA(n_components=1536)\n        # reduced_embeddings = pca.fit_transform(embedding)\n\n        try:\n            from pymongo import MongoClient\n        except ImportError:\n            raise ImportError(\"Please install pymongo to use MongoDB Atlas Vector Store\")\n        try:\n            mongo_client: MongoClient = MongoClient(documentdb_connection_url)\n            collection = mongo_client[db_name][collection_name]\n        except Exception as e:\n            raise ValueError(f\"Failed to connect to MongoDB Atlas: {e}\")\n\n\n        documents = []\n        for _input in inputs or []:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        if documents:\n            vector_store = DocumentDBVectorSearch.from_documents(\n                documents=documents,\n                embedding=embedding,\n                collection=collection,\n                index_name=index_name,\n            )\n        else:\n            vector_store = DocumentDBVectorSearch(\n                embedding=embedding,\n                collection=collection,\n                index_name=index_name,\n            )\n\n        # specify similarity algorithm, valid options are:\n        #   cosine (COS), euclidean (EUC), dot product (DOT)\n        if not vector_store.index_exists():\n            vector_store.create_index(dimensions, sim_algorithm)\n        return vector_store\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"advancedrag_db_embeddings","fileTypes":[],"file_path":"","password":false,"name":"collection_name","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"db_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"advanced_rag_db","fileTypes":[],"file_path":"","password":false,"name":"db_name","display_name":"Database Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"dimensions":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"768","fileTypes":[],"file_path":"","password":false,"name":"dimensions","display_name":"Dimension","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"documentdb_connection_url":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"documentdb_url","fileTypes":[],"file_path":"","password":false,"name":"documentdb_connection_url","display_name":"DocumentDB Connection URL","advanced":false,"dynamic":false,"info":"","load_from_db":true,"title_case":false,"input_types":["Text"]},"index_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"advancedrag_index","fileTypes":[],"file_path":"","password":false,"name":"index_name","display_name":"Index Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"similarity_algorithm":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"COS","fileTypes":[],"file_path":"","password":false,"options":["COS","EUC","DOT"],"name":"similarity_algorithm","display_name":"Search Type","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Construct a Document DB Vector Search` vector store from raw documents.","icon":"MongoDB","base_classes":["DocumentDBVectorSearch","VectorStore"],"display_name":"MongoDB Atlas","documentation":"","custom_fields":{"embedding":null,"inputs":null,"collection_name":null,"db_name":null,"index_name":null,"documentdb_connection_url":null,"dimensions":null,"similarity_algorithm":null},"output_types":["DocumentDBVectorSearch"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"MongoDBAtlasVector-EobDp","description":"Construct a Document DB Vector Search` vector store from raw documents.","display_name":"MongoDB Atlas"},"selected":false,"width":384,"height":867,"positionAbsolute":{"x":648.0533561221011,"y":1075.2900719590752},"dragging":false},{"id":"MongoDBAtlasVectorSearch-zCVGA","type":"genericNode","position":{"x":1633.8171242877297,"y":1287.0059985766363},"data":{"type":"MongoDBAtlasVectorSearch","node":{"template":{"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"input_value":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Input","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List, Optional\n\nfrom langflow.components.vectorstores.base.model import LCVectorStoreComponent\nfrom langflow.field_typing import Text\n\nfrom langflow.field_typing import Embeddings\nfrom langflow.interface.custom.custom_component import CustomComponent\nfrom langflow.schema.schema import Record\nfrom langchain_community.vectorstores.documentdb import (\n    DocumentDBSimilarityType,\n    DocumentDBVectorSearch,\n)\n\n\nclass DocumentDBSearchComponent(LCVectorStoreComponent):\n    display_name = \"DocumentDB Search\"\n    description = \"Search a DocumentDB Vector Store for similar documents.\"\n\n    def build_config(self):\n        return {\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"collection_name\": {\"display_name\": \"Collection Name\"},\n            \"db_name\": {\"display_name\": \"Database Name\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"documentdb_connection_url\": {\"display_name\": \"DocumentDB Connection URL\"},\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n            \"dimensions\": {\"display_name\": \"Dimension\"},\n            \"similarity_algorithm\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"COS\", \"EUC\", \"DOT\"],\n            },\n        }\n\n    def build(  # type: ignore[override]\n            self,\n            input_value: Text,\n            search_type: str,\n            embedding: Embeddings,\n            number_of_results: int = 4,\n            collection_name: str = \"\",\n            db_name: str = \"\",\n            index_name: str = \"\",\n            documentdb_connection_url: str = \"\",\n            dimensions: int = 1536,\n            similarity_algorithm: str = \"COS\",\n    ) -> List[Record]:\n\n        vector_store = self.DocumentDBComponent().build(\n            documentdb_connection_url=documentdb_connection_url,\n            collection_name=collection_name,\n            db_name=db_name,\n            embedding=embedding,\n            index_name=index_name,\n            dimensions=dimensions,\n        )\n        if not vector_store:\n            raise ValueError(\"Failed to create Document DB Vector Store\")\n        return self.search_with_vector_store(\n            vector_store=vector_store, input_value=input_value, search_type=search_type, k=number_of_results\n        )\n\n    class DocumentDBComponent(CustomComponent):\n        description = \"Construct a Document DB Vector Search` vector store from raw documents.\"\n        icon = \"MongoDB\"\n\n        def build_config(self):\n            return {\n                \"inputs\": {\"display_name\": \"Input\", \"input_types\": [\"Document\", \"Record\"]},\n                \"embedding\": {\"display_name\": \"Embedding\"},\n                \"collection_name\": {\"display_name\": \"Collection Name\"},\n                \"db_name\": {\"display_name\": \"Database Name\"},\n                \"index_name\": {\"display_name\": \"Index Name\"},\n                \"documentdb_connection_url\": {\"display_name\": \"DocumentDB Connection URL\"},\n                \"dimensions\": {\"display_name\": \"Dimension\"},\n                \"similarity_algorithm\": {\n                    \"display_name\": \"Search Type\",\n                    \"options\": [\"COS\", \"EUC\", \"DOT\"],\n                },\n            }\n\n        def build(\n                self,\n                embedding: Embeddings,\n                inputs: Optional[List[Record]] = None,\n                collection_name: str = \"\",\n                db_name: str = \"\",\n                index_name: str = \"\",\n                documentdb_connection_url: str = \"\",\n                dimensions: int = 1536,\n                similarity_algorithm: str = \"COS\",\n        ) -> DocumentDBVectorSearch:\n\n            if similarity_algorithm == \"COS\":\n                sim_algorithm = DocumentDBSimilarityType.COS\n            elif similarity_algorithm == \"EUC\":\n                sim_algorithm = DocumentDBSimilarityType.EUC\n            elif similarity_algorithm == \"DOT\":\n                sim_algorithm = DocumentDBSimilarityType.DOT\n            else:\n                raise ImportError(\"Invalid Similarity Algorithm. Only COS and EUC are allowed.\")\n\n            try:\n                from pymongo import MongoClient\n            except ImportError:\n                raise ImportError(\"Please install pymongo to use MongoDB Atlas Vector Store\")\n            try:\n                mongo_client: MongoClient = MongoClient(documentdb_connection_url)\n                collection = mongo_client[db_name][collection_name]\n            except Exception as e:\n                raise ValueError(f\"Failed to connect to MongoDB Atlas: {e}\")\n\n            documents = []\n            for _input in inputs or []:\n                if isinstance(_input, Record):\n                    documents.append(_input.to_lc_document())\n                else:\n                    documents.append(_input)\n            if documents:\n                vector_store = DocumentDBVectorSearch.from_documents(\n                    documents=documents,\n                    embedding=embedding,\n                    collection=collection,\n                    index_name=index_name,\n                )\n            else:\n                vector_store = DocumentDBVectorSearch(\n                    embedding=embedding,\n                    collection=collection,\n                    index_name=index_name,\n                )\n\n            # specify similarity algorithm, valid options are:\n            #   cosine (COS), euclidean (EUC), dot product (DOT)\n            if not vector_store.index_exists():\n                vector_store.create_index(dimensions, sim_algorithm)\n            return vector_store\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"advancedrag_db_embeddings","fileTypes":[],"file_path":"","password":false,"name":"collection_name","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"db_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"advanced_rag_db","fileTypes":[],"file_path":"","password":false,"name":"db_name","display_name":"Database Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"dimensions":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"768","fileTypes":[],"file_path":"","password":false,"name":"dimensions","display_name":"Dimension","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"documentdb_connection_url":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"documentdb_url","fileTypes":[],"file_path":"","password":false,"name":"documentdb_connection_url","display_name":"DocumentDB Connection URL","advanced":false,"dynamic":false,"info":"","load_from_db":true,"title_case":false,"input_types":["Text"]},"index_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"advancedrag_index","fileTypes":[],"file_path":"","password":false,"name":"index_name","display_name":"Index Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"number_of_results":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":4,"fileTypes":[],"file_path":"","password":false,"name":"number_of_results","display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","load_from_db":false,"title_case":false},"search_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"options":["Similarity","MMR"],"name":"search_type","display_name":"Search Type","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"Similarity"},"similarity_algorithm":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"COS","fileTypes":[],"file_path":"","password":false,"options":["COS","EUC","DOT"],"name":"similarity_algorithm","display_name":"Search Type","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Search a DocumentDB Vector Store for similar documents.","base_classes":["Record"],"display_name":"MongoDB Atlas Search","documentation":"","custom_fields":{"input_value":null,"search_type":null,"embedding":null,"number_of_results":null,"collection_name":null,"db_name":null,"index_name":null,"documentdb_connection_url":null,"dimensions":null,"similarity_algorithm":null},"output_types":["Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"MongoDBAtlasVectorSearch-zCVGA","description":"Search a DocumentDB Vector Store for similar documents.","display_name":"MongoDB Atlas Search"},"selected":false,"width":384,"height":1007,"positionAbsolute":{"x":1633.8171242877297,"y":1287.0059985766363},"dragging":false},{"id":"HuggingFaceEmbeddings-bhlNW","type":"genericNode","position":{"x":-78.02389361781479,"y":2107.258990329415},"data":{"type":"HuggingFaceEmbeddings","node":{"template":{"cache_folder":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"cache_folder","display_name":"Cache Folder","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Dict, Optional\n\nfrom langchain_community.embeddings.huggingface import HuggingFaceEmbeddings\n\nfrom langflow.interface.custom.custom_component import CustomComponent\n\n\nclass HuggingFaceEmbeddingsComponent(CustomComponent):\n    display_name = \"Hugging Face Embeddings\"\n    description = \"Generate embeddings using HuggingFace models.\"\n    documentation = (\n        \"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers\"\n    )\n    icon = \"HuggingFace\"\n\n    def build_config(self):\n        return {\n            \"cache_folder\": {\"display_name\": \"Cache Folder\", \"advanced\": True},\n            \"encode_kwargs\": {\"display_name\": \"Encode Kwargs\", \"advanced\": True, \"field_type\": \"dict\"},\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"field_type\": \"dict\", \"advanced\": True},\n            \"model_name\": {\"display_name\": \"Model Name\"},\n            \"multi_process\": {\"display_name\": \"Multi Process\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        cache_folder: Optional[str] = None,\n        encode_kwargs: Optional[Dict] = {},\n        model_kwargs: Optional[Dict] = {},\n        model_name: str = \"sentence-transformers/clip-ViT-B-32\",\n        multi_process: bool = False,\n    ) -> HuggingFaceEmbeddings:\n        return HuggingFaceEmbeddings(\n            cache_folder=cache_folder,\n            encode_kwargs=encode_kwargs,\n            model_kwargs=model_kwargs,\n            model_name=model_name,\n            multi_process=multi_process,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"encode_kwargs":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"encode_kwargs","display_name":"Encode Kwargs","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"model_kwargs":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"model_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"sentence-transformers/all-mpnet-base-v2","fileTypes":[],"file_path":"","password":false,"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"multi_process":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"multi_process","display_name":"Multi Process","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"Generate embeddings using HuggingFace models.","icon":"HuggingFace","base_classes":["Embeddings","HuggingFaceEmbeddings"],"display_name":"Hugging Face Embeddings","documentation":"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers","custom_fields":{"cache_folder":null,"encode_kwargs":null,"model_kwargs":null,"model_name":null,"multi_process":null},"output_types":["HuggingFaceEmbeddings"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false},"id":"HuggingFaceEmbeddings-bhlNW","description":"Generate embeddings using HuggingFace models.","display_name":"Hugging Face Embeddings"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":-78.02389361781479,"y":2107.258990329415},"dragging":false}],"edges":[{"source":"TextInput-R97Ag","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-R97Agœ}","target":"ChatInput-Wzq9A","targetHandle":"{œfieldNameœ:œsender_nameœ,œidœ:œChatInput-Wzq9Aœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"sender_name","id":"ChatInput-Wzq9A","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextInput","id":"TextInput-R97Ag"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-TextInput-R97Ag{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-R97Agœ}-ChatInput-Wzq9A{œfieldNameœ:œsender_nameœ,œidœ:œChatInput-Wzq9Aœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"},{"source":"ChatInput-Wzq9A","sourceHandle":"{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wzq9Aœ}","target":"Prompt-YJndQ","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œPrompt-YJndQœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"question","id":"Prompt-YJndQ","inputTypes":["Document","BaseOutputParser","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","Record","str","Text"],"dataType":"ChatInput","id":"ChatInput-Wzq9A"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-ChatInput-Wzq9A{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wzq9Aœ}-Prompt-YJndQ{œfieldNameœ:œquestionœ,œidœ:œPrompt-YJndQœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"},{"source":"TextInput-R97Ag","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-R97Agœ}","target":"MemoryComponent-7bzTr","targetHandle":"{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-7bzTrœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"session_id","id":"MemoryComponent-7bzTr","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextInput","id":"TextInput-R97Ag"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-TextInput-R97Ag{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œTextInputœ,œidœ:œTextInput-R97Agœ}-MemoryComponent-7bzTr{œfieldNameœ:œsession_idœ,œidœ:œMemoryComponent-7bzTrœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"},{"source":"MemoryComponent-7bzTr","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-7bzTrœ}","target":"Prompt-YJndQ","targetHandle":"{œfieldNameœ:œhistoryœ,œidœ:œPrompt-YJndQœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"history","id":"Prompt-YJndQ","inputTypes":["Document","BaseOutputParser","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"MemoryComponent","id":"MemoryComponent-7bzTr"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-MemoryComponent-7bzTr{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-7bzTrœ}-Prompt-YJndQ{œfieldNameœ:œhistoryœ,œidœ:œPrompt-YJndQœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"},{"source":"Prompt-YJndQ","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-YJndQœ}","target":"OpenAIModel-l8vdA","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-l8vdAœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-l8vdA","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"Prompt","id":"Prompt-YJndQ"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-Prompt-YJndQ{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-YJndQœ}-OpenAIModel-l8vdA{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-l8vdAœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"},{"source":"OpenAIModel-l8vdA","sourceHandle":"{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-l8vdAœ}","target":"ChatOutput-awYSO","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-awYSOœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-awYSO","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"OpenAIModel","id":"OpenAIModel-l8vdA"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-OpenAIModel-l8vdA{œbaseClassesœ:[œobjectœ,œstrœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-l8vdAœ}-ChatOutput-awYSO{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-awYSOœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}"},{"source":"Directory-yIno3","sourceHandle":"{œbaseClassesœ:[œRecordœ],œdataTypeœ:œDirectoryœ,œidœ:œDirectory-yIno3œ}","target":"SplitText-tDnBJ","targetHandle":"{œfieldNameœ:œinputsœ,œidœ:œSplitText-tDnBJœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"inputs","id":"SplitText-tDnBJ","inputTypes":["Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["Record"],"dataType":"Directory","id":"Directory-yIno3"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-Directory-yIno3{œbaseClassesœ:[œRecordœ],œdataTypeœ:œDirectoryœ,œidœ:œDirectory-yIno3œ}-SplitText-tDnBJ{œfieldNameœ:œinputsœ,œidœ:œSplitText-tDnBJœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}"},{"source":"SplitText-tDnBJ","sourceHandle":"{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSplitTextœ,œidœ:œSplitText-tDnBJœ}","target":"MongoDBAtlasVector-EobDp","targetHandle":"{œfieldNameœ:œinputsœ,œidœ:œMongoDBAtlasVector-EobDpœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}","data":{"targetHandle":{"fieldName":"inputs","id":"MongoDBAtlasVector-EobDp","inputTypes":["Document","Record"],"type":"Record"},"sourceHandle":{"baseClasses":["Record"],"dataType":"SplitText","id":"SplitText-tDnBJ"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-SplitText-tDnBJ{œbaseClassesœ:[œRecordœ],œdataTypeœ:œSplitTextœ,œidœ:œSplitText-tDnBJœ}-MongoDBAtlasVector-EobDp{œfieldNameœ:œinputsœ,œidœ:œMongoDBAtlasVector-EobDpœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œRecordœ}"},{"source":"ChatInput-Wzq9A","sourceHandle":"{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wzq9Aœ}","target":"MongoDBAtlasVectorSearch-zCVGA","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œMongoDBAtlasVectorSearch-zCVGAœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"MongoDBAtlasVectorSearch-zCVGA","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","Record","str","Text"],"dataType":"ChatInput","id":"ChatInput-Wzq9A"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-ChatInput-Wzq9A{œbaseClassesœ:[œobjectœ,œRecordœ,œstrœ,œTextœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-Wzq9Aœ}-MongoDBAtlasVectorSearch-zCVGA{œfieldNameœ:œinput_valueœ,œidœ:œMongoDBAtlasVectorSearch-zCVGAœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}","selected":false},{"source":"MongoDBAtlasVectorSearch-zCVGA","sourceHandle":"{œbaseClassesœ:[œRecordœ],œdataTypeœ:œMongoDBAtlasVectorSearchœ,œidœ:œMongoDBAtlasVectorSearch-zCVGAœ}","target":"Prompt-YJndQ","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-YJndQœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-YJndQ","inputTypes":["Document","BaseOutputParser","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["Record"],"dataType":"MongoDBAtlasVectorSearch","id":"MongoDBAtlasVectorSearch-zCVGA"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-MongoDBAtlasVectorSearch-zCVGA{œbaseClassesœ:[œRecordœ],œdataTypeœ:œMongoDBAtlasVectorSearchœ,œidœ:œMongoDBAtlasVectorSearch-zCVGAœ}-Prompt-YJndQ{œfieldNameœ:œcontextœ,œidœ:œPrompt-YJndQœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}"},{"source":"HuggingFaceEmbeddings-bhlNW","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-bhlNWœ}","target":"MongoDBAtlasVector-EobDp","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVector-EobDpœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"MongoDBAtlasVector-EobDp","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings","HuggingFaceEmbeddings"],"dataType":"HuggingFaceEmbeddings","id":"HuggingFaceEmbeddings-bhlNW"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-HuggingFaceEmbeddings-bhlNW{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-bhlNWœ}-MongoDBAtlasVector-EobDp{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVector-EobDpœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"},{"source":"HuggingFaceEmbeddings-bhlNW","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-bhlNWœ}","target":"MongoDBAtlasVectorSearch-zCVGA","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVectorSearch-zCVGAœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"MongoDBAtlasVectorSearch-zCVGA","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings","HuggingFaceEmbeddings"],"dataType":"HuggingFaceEmbeddings","id":"HuggingFaceEmbeddings-bhlNW"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-HuggingFaceEmbeddings-bhlNW{œbaseClassesœ:[œEmbeddingsœ,œHuggingFaceEmbeddingsœ],œdataTypeœ:œHuggingFaceEmbeddingsœ,œidœ:œHuggingFaceEmbeddings-bhlNWœ}-MongoDBAtlasVectorSearch-zCVGA{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVectorSearch-zCVGAœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"}],"viewport":{"x":335.80048706855916,"y":-58.62657001516004,"zoom":0.3574031637705963}},"description":"ai practicum team 1 advanced rag model","name":"advanced_rag_model","last_tested_version":"1.0.0a29","is_component":false}